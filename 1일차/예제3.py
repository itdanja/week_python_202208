"""
    함수 : 함[상자] 수[숫자]    : 상자 안에 들어있는 수 ->  상자에 미리 넣어둔 수 -> 미리 정의된 코드
        목적 :  *1.코드의 재활용 2.인수에 따른 다른 결과물 3. 함수 종료시 메모리 자동 초기화
        용어 : 인수[ 함수 안으로 들어가는 수 ]  , 반환 [ 함수 결과 / 함수 밖으로 나오는 수 ]
        문법
            [ 정의 ]   def 함수명( 인수명 , 인수명 ~~ ) :
                                    실행코드[미리 정의하는 코드]
                                    return 반환데이터
        #  인수o 반환o  / 인수x 반환x  / 인수o 반환x / 인수x 반환o
        예 )
                    x + y : 라는 식으로 함수 정의
                        인수x -> 3
                        인수y -> 10
                                                반환 -> 13
"""
# 1.
def 더하기( 인수1 , 인수2 ) :      # 1. 함수 정의한다 [ 인수 2개 ]
    결과 = 인수1 + 인수2              # 2. 함수 안에서 실행할 코드 정의한다.
    return 결과                           # 3. 함수가 종료 되면서  반환값을 작성한다.

계산1 = 더하기( 3 , 5 )               # 4. 함수 호출시 :  함수명( 값1  , 값2 )
print("더하기 함수 결과 : " , 계산1 )
# 2.
def 함수1() : # 함수 만들기
    지역변수 = 10   # 함수 안에서 선언된 변수는 함수 안에서 사용가능 [ 지역변수 local ]
    print( "함수1에서 지역변수 호출 : " , 지역변수 )

def 함수2() :
    print("함수2에서 전역변수 호출 : " , 전역변수 )   # 함수 밖에서 선언시 함수 안에서도 사용 가능 [ 전역변수 ]

def 함수3() :
    global 글로벌변수        # 함수 안에서 글로벌 변수 선언시에는 함수 밖에서 사용 가능 한다 . [전역변수 ]
    글로벌변수 = 30

전역변수 = 20
함수1()       # 함수 호출
함수2()
함수3()
# print("함수1내 존재하는 지역변수 호출 :  " , 지역변수 )    # 함수내 지역변수 호출 불가능
print('함수3내 존재하는 전역변수 호출 : ' , 글로벌변수 )















